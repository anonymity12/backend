archOfPostCommentGoldSystem.txt
- comment: addComment: + score for post
					 : - gold for commenter
					 : + gold for post owner;
- post: 
    * listAllPosts
        - commentCount
        - likeCount
    * addPost: URL：/add
        * + gold for post owner; 
    * watchPost: URL: /detail/postId
        * summary: when watch a post:
            - do some calculation(for backend)
            - retrive related info(for frontend)
        1) --- do some calculation for this post start---
        + gold for owner, +score for this post; 
        - gold for watcher
        --- do some calculation for this post end---
        2) ---retrive related info start---
        +userInfo
        +likeCount <- likeService.findEntityLikeCount(postId)
        +likeStatus<- likeService.findEntityLikeStatus(curUserId, postId)
        +comments (commentService.findCommentByEntity(type:post/comment, entityId, ))
            : for this post
            : for some comment
          - comment(conent)
          - user(comment owner)
          - likeCount
          - likeStatus
          - replyCount
          - replys
              + reply
              + user
              + target
              + likeCount
              + likeStatus
        ---retrive related info end---
        ```java
        PostDetailVo watchPost(postId){
            postDetailVo.setPost(post);
            postDetailVo.setOwner(user);
            postDetailVo.setLikeCount(likeCount);
            postDetailVo.setLikeStatus(likeStatus);
            commentList = commentService.findCommentByEntity();
            commentVoList = initCommentVoList();
            commentList.forEach(it->)
                // for post comment
                commentVo.put("comment", commentContent);
                commentVo.put("user", commentOwner);
                commentVo.put("likeCount", likeCount);
                commentVo.put("likeStatus", likeStatus);
                replyList = commentService.findCommentByEntity();
                replyVoList = initReplyVoList();
                replyList.forEach(it->)
                    // for comment comment
                    replyVo.put("reply", it.reply)
                    replyVo.put("user", it.replyOwner)
                    replyVo.put("target", it.replyTarget)
                    replyVo.put("likeCount", it.likeCount)
                    replyVo.put("likeStatus", it.likeStatus)
                    replyVoList.add(replyVo)
                commentVo.put("replys", replyVoList)
                commentVoList.add(commentVo);
            postDetailVo.setComments(commentVoList);
        }
        ```
    * topPost置顶帖子：updateType/updateStatus(id, type/status)
- rankList of post:
	sorted by score;

---
# beans
comment bean:
    id
    userId(owner)
    entityType(post or comment)
    entityId(postId, or commentId)
    targetId(targetEntityOwner)
    content
    status(0:normal; 1:banned)
    createTime

discussPost bean:
    id
    userId
    title
    content
    type
    status(!=2 is fine)
    createTime
    commentCount
    score
Gold bean:
    owner
    amount
---
# mappers
commentMapper
    selectCommentById
    selectCommentByEntity
    selectCommentCountByEntity
    selectCommentByUserId
    selectCommentCountByUserId
    insertComment
discussPostMapper
    selectDiscussPosts
        might by:
            userId
            orderMode
            limit offset limit
    selectDiscussPostRows
        might by:
            userId
    selectDiscussPostById
    insertDiscussPost
    updateCommentCount
    updateType
    updateStatus
    updateScore
---
# services
commentService
    findCommentByEntity
    findCommentCount
    findCommentByUserId
    findCommentCountByUserId
    addComment(@Transactional(isolation, propagation))
        discussPostService.updateCommentCount
DiscussPostService(like my SixLogService)
    @PostConstruct:initCache
    findDiscussPosts
    findDiscussPostRows
    findDiscussPostById
    addDiscussPost
    updateCommentCount
    updateType
    updateStatus
    updateScore
---
# controllers
DiscussPostController
IndexController
    共同：getInfo about posts

---
# like function
1) use redis
redis save
    1) likeCount for one entity
        using: set; post:332<->(userId1, userId2,...)
        set.size() -> likeCount 
    2) likeCount for one user
        using: string; 16<->56
2) design RedisKeyUtil